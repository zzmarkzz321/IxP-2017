from pymongo import MongoClient
from flask import session

# Connect and find/create database
client = MongoClient('localhost', 27017)
db = client['IxP']

# Init collection
user_collection = db['user']
route_collection = db['route']
location_collection = db['location']


"""
Grab logged-in user info

@param: user_id
"""
def get_logged_user(username, password):
    # query the user document based on the user_id
    try:
        user_info = user_collection.find_one({"username": username})
        p = user_info['password']
    except:
        return {"error": "User not found"}, 401

    if password == p:
        print('password matches')
        return user_info, 200

    # return the query as a json
    print('password does not match')
    return {"error": "Wrong login info"}, 403

"""
Updates the user document (except route)

@protected
@param: user_id
"""
def update_user(username, field, value):

    if session["loggedin"] == True:
        print('logged in')

        # grab current user document
        user = user_collection.find_one({"username": username})

        user[field] = value
        user_collection.update_one({"username": username}, {"$set": user}, upsert=False)

"""
Adds a route to a users route array

@param: user_id
"""
def add_route(username, route):
    user_collection.update_one({"username": username}, {"$push": {"routes": route}}, upsert=False)

"""
removes a route to from a users route array

@param: user_id
"""
def remove_route(username, route):
    user_collection.update_one({"username": username}, {"$pull": {"routes": route}}, upsert=False)

"""
Grab routes pertaining to the user

@protected
@param: route_id

@return: an aray of all route id's which can be used to fetch the locations within the route
"""
def get_routes(routes):
    # query the route based on the route_id
    # must be accessed by get_logged_user
    route = []

    for route_id in routes:
        route.append(route_collection.find_one({"_id": route_id}))

    # return an array of routes
    return route


"""
Grabs available locations for travel 

@protected
@param: location_id
"""
def get_locations(locations):
    # query all locations based on the location_id
    locations = []

    for location_id in locations:
        locations.append(location_collection.find_one({"_id": location_id}))
    # return the array of locations 
    return locations


"""
User Collection:

{
	username: String,
	profilePicture: BLOB,
	password: Hashed password,
	firstName: String,
	lastName: String,
	routes: [route-id]
}

Route Collection:

{
	route-id: (generated by mongodb),
	locations: [{location-id: Number, dayOfTravel: String}],
    experience: ,
    rating: 
}

Location Collection:

{
	location-id: (generated by mongodb),
	name: String,
	city: String,
	address: String,
	latitude: Number,
	longitude: Number,
	rating: Number,
	comments: [{user: String, comment: String}]
}



"""