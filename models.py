from pymongo import MongoClient

# Connect and find/create database
client = MongoClient('localhost', 27017)
db = client['IxP']

# Init collection
user_collection = db['user']
route_collection = db['route']
location_collection = db['location']


"""
    OAuth Signin
"""
class OAuthSignIn(object):
    providers = None

    def __init__(self, provider_name):
        self.provider_name = provider_name
        credentials = current_app.config['OAUTH_CREDENTIALS'][provider_name]
        self.consumer_id = credentials['id']
        self.consumer_secret = credentials['secret']

    def authorize(self):
        return redirect(self.service.get_authorize_url(
            scope='email',
            response_type='code',
            redirect_uri=self.get_callback_url())
        )

    def callback(self):
        def decode_json(payload):
            return json.loads(payload.decode('utf-8'))

        if 'code' not in request.args:
            return None, None, None
        oauth_session = self.service.get_auth_session(
            data={'code': request.args['code'],
                  'grant_type': 'authorization_code',
                  'redirect_uri': self.get_callback_url()},
            decoder=decode_json
        )
        me = oauth_session.get('me').json()
        return (
            'facebook$' + me['id'],
            me.get('email').split('@')[0],  # Facebook does not provide
                                            # username, so the email's user
                                            # is used instead
            me.get('email')
        )

    def get_callback_url(self):
        return url_for('oauth_callback', provider=self.provider_name,
                       _external=True)

    @classmethod
    def get_provider(self, provider_name):
        if self.providers is None:
            self.providers = {}
            for provider_class in self.__subclasses__():
                provider = provider_class()
                self.providers[provider.provider_name] = provider
        return self.providers[provider_name]

"""
    Facebook Sign In via Oauth
"""
class FacebookSignIn(OAuthSignIn):
    def __init__(self):
        super(FacebookSignIn, self).__init__('facebook')
        self.service = OAuth2Service(
            name='facebook',
            client_id=self.consumer_id,
            client_secret=self.consumer_secret,
            authorize_url='https://graph.facebook.com/oauth/authorize',           
            access_token_url='https://graph.facebook.com/oauth/access_token',
            base_url='https://graph.facebook.com/'
        )


"""
Grab logged-in user info

@param: user_id
"""
def get_logged_user(username, password):
    # query the user document based on the user_id
    user_info = user_collection.find_one({"username": username})
    p = user_info['password']

    if password == p:
        print('password matches')
        return user_info

    # return the query as a json
    print('password does not match')
    return {"error": "Wrong login info"}, 403


"""
Grab routes pertaining to the user

@param: route_id
"""
def get_routes(route_id):
    # query the route based on the route_id
    # must be accessed by get_logged_user

    # return an array of routes
    return


"""
Grabs available locations for travel 
"""
def get_locations(location_id):
    # query all locations based on the location_id

    # return the array of locations 
    return


"""
User Collection:

{
	username: String,
	profilePicture: BLOB,
	password: Hashed password,
	firstName: String,
	lastName: String,
	routes: [route-id]
}

Route Collection:

{
	route-id: (generated by mongodb),
	locations: [{location-id: Number,  dayOfTravel: String}]
}

Location Collection:

{
	location-id: (generated by mongodb),
	name: String,
	city: String,
	address: String,
	latitude: Number,
	longitude: Number,
	rating: Number,
	comments: [{user: String, comment: String}]
}



"""